resources:
- repo: self
  clean: true
trigger:
  batch: true
  branches:
    include:
    - master
name: $(Build.BuildID)
variables:
  ResourceGroupName: 'frontdoor'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  AppServicePlanResourceGroupName: shared-infrastructure
  WebApp1: 'fd-backend-we'
  WebApp2: 'fd-backend-us'

stages:
- stage: build
  jobs:
  - job: infra
    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: self
      submodules: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: Infrastructure Scripts'
      inputs:
        targetPath: deploy
        ArtifactName: deploy

  - job: web
    pool:
      vmImage: 'windows-latest'
    variables:
      BuildConfiguration: 'Release'
      ProjectName: 'Frontdoor'

    steps:
    - checkout: self
      submodules: true

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'
        feedsToUse: config
        nugetConfigPath: NuGet.Config

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        projects: $(ProjectName)/$(ProjectName).csproj
        arguments: '--configuration $(BuildConfiguration) --no-build --output $(build.artifactstagingdirectory)/web'
        zipAfterPublish: false

    - powershell: ' (Get-ChildItem -Path $(build.artifactstagingdirectory)/web -Recurse).Fullname -match "appsettings\.Development\.json" | Remove-Item'
      workingDirectory: '$(build.artifactstagingdirectory)'
      displayName: 'Remove appsettings.Development.json'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish web Artifact'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/web'
        ArtifactName: web

- stage: deployment
  jobs:
  - job: infra
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: deploy
        targetPath: '$(System.ArtifactsDirectory)/deploy'

    - task: AzurePowerShell@4
      displayName: 'Deploy infrastructure'
      inputs:
        azureSubscription: 'Opensource Deployments'
        ScriptPath: '$(System.ArtifactsDirectory)/deploy/Deploy.ps1'
        ScriptArguments: '-ResourceGroupName $(ResourceGroupName) -AppServicePlanResourceGroupName $(AppServicePlanResourceGroupName) -WebApp1 $(WebApp1) -WebApp2 $(WebApp2)'
        azurePowerShellVersion: LatestVersion

  - job: web
    dependsOn: infra
    pool:
      vmImage: 'windows-latest'
    variables:
      AppServicePackageFolder: '$(System.ArtifactsDirectory)/Frontdoor'

    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: web
        targetPath: '$(System.ArtifactsDirectory)'

    - task: ArchiveFiles@2
      displayName: 'Zip webapp'
      inputs:
        rootFolderOrFile: '$(AppServicePackageFolder)'
        includeRootFolder: false
        archiveFile: '$(System.DefaultWorkingDirectory)/package.zip'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Publish to webapp 1'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Opensource Deployments'
        appType: 'webApp'
        WebAppName: '$(WebApp1)'
        ResourceGroupName: '$(ResourceGroupName)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/package.zip'
        enableCustomDeployment: true
        DeploymentType: 'runFromZip'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Publish to webapp 2'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Opensource Deployments'
        appType: 'webApp'
        WebAppName: '$(WebApp2)'
        ResourceGroupName: '$(ResourceGroupName)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/package.zip'
        enableCustomDeployment: true
        DeploymentType: 'runFromZip'
